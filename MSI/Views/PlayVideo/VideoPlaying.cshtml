@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Load Video from URL</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <title>WI Instructions</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.min.js"></script>
    <style>
        #videoPlayer {
            display: none;
            width: 100%;
            height: 100%;
        }
        /* Video Positioning Styles */
        .video-player {
            position: fixed; /* Position relative to the viewport */
            height: auto; /* Maintain aspect ratio */
            z-index: 9999; /* Make sure it stays on top */
        }

        /* Error Card Styles */
        .error-card {
            background-color: #f8d7da; /* Light red background */
            border-color: #f5c6cb; /* Light pink border */
            color: #721c24; /* Dark red text color */
            padding: 250px; /* Space inside the card */
            margin: 50px; /* Space outside the card */
            border: 1px solid transparent; /* Make sure border is visible */
            border-radius: .25rem; /* Rounded corners */
            font-family: Arial, sans-serif;
            font-size: 40px;
            text-align: center; /* Font style */
        }

            /* Additional Styling for Error Card Text */
            .error-card p {
                margin: 0; /* Remove default margin for the paragraph */
            }

            /* Optional: Hover effect for the error card to make it interactive */
            .error-card:hover {
                background-color: #f5c6cb; /* Change background on hover */
                cursor: pointer; /* Make cursor pointer when hovering */
            }

        #loading {
            font-size: 24px;
            font-weight: bold;
            text-align: center;
            margin-top: 100px;
        }

        #htmlContent {
            display: none;
            overflow: hidden;
            height: 900px;
            width: 100%;
            padding: 10px;
        }

    </style>
</head>
<body>
    <!-- Error Card Display -->
    @if (ViewBag.FileNotFound != null && ViewBag.FileNotFound == true)
    {
        <div class="error-card">
            <p>File not found!</p>
        </div>
    }

    @*    <div id="loading">Loading video...</div>
    <video id="videoPlayer" width="640" height="360" autoplay loop="loop" muted playsinline>
    <source src="~/uploads/THERMAL MODULE ASSY.mp4" type="video/mp4">
    Your browser does not support the video tag.
    </video> *@

    <div id="loading">Loading video...</div>
    <video id="videoPlayer" controls loop autoplay muted>
        Your browser does not support the video tag.
    </video>

    <div id="htmlContent" style="display:none;"></div>

    <div id="pdfContent" style="display:none; overflow: hidden; height: 800px;margin-left:5%">
        <canvas id="pdfCanvas"></canvas>
    </div>

</body>
</html>
<script>
    $(document).ready(function () {
        var userT = '@ViewBag.UserType';
        if (userT == 'valid-user') {
            $('#dvNewSystem').css('display', 'none');
            $('#dvWorkInstruction').css('display', 'none');
        }
        else {
            $('#dvNewSystem').css('display', '');
            $('#dvWorkInstruction').css('display', '');
        }
        var path = '@ViewBag.FilePath'.trim();
        console.log("File Path:", path);
        var fileType = path.split('.').pop().toLowerCase();
        console.log("File Type:", fileType);
        var videoElement = $("#videoPlayer");
        if (fileType === 'mp4') {
            var videoSrc = "/videos/" + path;
            videoElement.attr("src", videoSrc);
            videoElement.prop('loop', true);
            videoElement.prop('autoplay', true);
            videoElement.on("canplay", function () {
                $("#loading").hide();
                videoElement.show();
            });
            videoElement.on("error", function () {
                $("#loading").text("Failed to load video.");
            });
        } else if (fileType === 'html') {
            var htmlContentContainer = $("#htmlContent");
            $("#loading").hide();
            $.ajax({
                url: "/videos/" + path,
                success: function (data) {
                    htmlContentContainer.html(data);
                    htmlContentContainer.show();
                    startAutoScroll();
                },
                error: function () {
                    $("#loading").text("Failed to load HTML file.");
                }
            });
        } else if (fileType === 'pdf') {
            var pdfContainer = $("#pdfContent");
            var pdfSrc = "/videos/" + path;
            $("#loading").hide();

            // Initialize PDF.js and load the PDF
            var loadingTask = pdfjsLib.getDocument(pdfSrc);
            loadingTask.promise.then(function (pdfDoc_) {
                var pdfDoc = pdfDoc_;
                var scale = 2; // Scale for better readability
                var pageNum = 1;

                // Array to store canvas elements for each page
                var canvases = [];

                // Function to render each page of the PDF
                function renderPage(pageNum) {
                    pdfDoc.getPage(pageNum).then(function (page) {
                        var canvas = document.createElement('canvas');
                        canvases.push(canvas); // Store canvas element
                        var ctx = canvas.getContext('2d');
                        var viewport = page.getViewport({ scale: scale });
                        canvas.height = viewport.height;
                        canvas.width = viewport.width;

                        var renderContext = {
                            canvasContext: ctx,
                            viewport: viewport
                        };
                        page.render(renderContext).promise.then(function () {
                            // Once rendered, append it to the container
                            pdfContainer.append(canvas);
                        });
                    });
                }

                // Render all pages of the PDF
                var totalPages = pdfDoc.numPages;
                for (let page = 1; page <= totalPages; page++) {
                    renderPage(page);
                }

                // Start auto-scrolling for the PDF pages
                startAutoScrollForPdf(pdfDoc.numPages);
            });

            pdfContainer.show();
        } else {
            $("#loading").text("Invalid file type.");
        }


        var scrollTimer;
        var scrollDistance = 0;
        var scrollStep = 5;
        var scrollInterval = 100;

        function scrollContent() {
            var contentFile = $('#htmlContent');
            scrollDistance += scrollStep;
            contentFile.scrollTop(scrollDistance);

            if (contentFile.scrollTop() >= contentFile[0].scrollHeight - contentFile.height()) {
                contentFile.scrollTop(0);
                scrollDistance = 0;
            }
        }
        function scrollPdfContent() {
            var canvas = $('#pdfCanvas');
            scrollDistance += scrollStep;

            var pdfContentContainer = $('#pdfContent');
            pdfContentContainer.scrollTop(scrollDistance);

            if (pdfContentContainer.scrollTop() >= pdfContentContainer[0].scrollHeight - pdfContentContainer.height()) {
                pdfContentContainer.scrollTop(0);
                scrollDistance = 0;
            }
        }
        function startAutoScroll() {
            console.log("Starting auto-scroll...");
            scrollTimer = setInterval(scrollContent, scrollInterval);
        }
        function startAutoScrollForPdf() {
            console.log("Starting auto-scroll for PDF...");
            scrollTimer = setInterval(scrollPdfContent, scrollInterval);
        }
        function stopAutoScroll() {
            console.log("Stopping auto-scroll...");
            clearInterval(scrollTimer);
            scrollTimer = null;
        }

        $('body').click(function () {
            if (scrollTimer) {
                stopAutoScroll();
            } else {
                if (fileType === 'html') {
                    startAutoScroll();
                } else if (fileType === 'pdf') {
                    startAutoScrollForPdf();
                }
            }
        });
    });



    // function opensscreen(myvideo)
    // {

    //          console.log("hitting");
    // var elem = myVideo;
    // console.log(elem);
    // if (elem.requestFullscreen) {
    //   elem.requestFullscreen();
    // } else if (elem.mozRequestFullScreen) { /* Firefox */
    //   elem.mozRequestFullScreen();
    // } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari & Opera */
    //   elem.webkitRequestFullscreen();
    // } else if (elem.msRequestFullscreen) { /* IE/Edge */
    //   elem.msRequestFullscreen();
    // }
    // }

</script>

